<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat with AI</title>
    <style>
        /* Basic styling */
        body {
            font-family: Arial, sans-serif;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            overflow: hidden;
        }
        .chat-container {
            background-color: white;
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
            border-radius: 8px;
            width: 450px;
            height: 650px;
            display: flex;
            flex-direction: column;
            overflow: hidden;
            animation: fadeIn 1s ease-in-out;
        }
        .chat-header {
            background-color: #4f93ce;
            color: white;
            padding: 15px;
            text-align: center;
            font-size: 18px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .chat-header select {
            font-size: 14px;
            padding: 5px;
            margin-right: 10px;
            background-color: white;
            border-radius: 5px;
        }
        .clear-button {
            background-color: #ff5e5e;
            color: white;
            border: none;
            padding: 8px 12px;
            cursor: pointer;
            border-radius: 5px;
            transition: background-color 0.3s;
        }
        .clear-button:hover {
            background-color: #ff3b3b;
        }
        .chat-box {
            flex: 1;
            padding: 15px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
        }
        .chat-message {
            margin-bottom: 10px;
            padding: 10px;
            border-radius: 5px;
            max-width: 70%;
        }
        .user-message {
            background-color: #4f93ce;
            color: white;
            align-self: flex-end;
        }
        .ai-message {
            background-color: #f1f1f1;
            color: #333;
            align-self: flex-start;
        }
        .input-container {
            display: flex;
            border-top: 1px solid #ddd;
        }
        .input-field {
            flex: 1;
            border: none;
            padding: 10px;
            font-size: 16px;
        }
        .input-field:focus {
            outline: none;
        }
        .send-button {
            background-color: #4f93ce;
            color: white;
            border: none;
            padding: 10px 15px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        .send-button:hover {
            background-color: #3d7fb5;
        }

        /* Fade-in animation */
        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        /* Message appearance animation */
        @keyframes slideIn {
            from {
                transform: translateX(100px);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }
        .chat-message {
            animation: slideIn 0.3s ease-out;
        }
    </style>
</head>
<body>
    <div class="chat-container">
        <div class="chat-header">
            <select id="model-select">
                <option value="Qwen/Qwen-7B-Chat-Instruct">Qwen-2.5 7B Instruct</option>
                <option value="gpt2">GPT-2</option>
                <option value="EleutherAI/gpt-neo-2.7B">GPT-Neo 2.7B</option>
                <option value="bigscience/bloom-560m">BLOOM 560M</option>
            </select>
            <button class="clear-button" id="clear-chat">Clear Chat</button>
        </div>
        <div class="chat-box" id="chat-box"></div>
        <div class="input-container">
            <input type="text" id="input-field" class="input-field" placeholder="Type a message..." />
            <button id="send-button" class="send-button">Send</button>
        </div>
    </div>

    <script>
        const chatBox = document.getElementById('chat-box');
        const inputField = document.getElementById('input-field');
        const sendButton = document.getElementById('send-button');
        const modelSelect = document.getElementById('model-select');
        const clearChatButton = document.getElementById('clear-chat');

        // Helper to create and append a message element
        function addMessage(text, isUser) {
            const messageDiv = document.createElement('div');
            messageDiv.classList.add('chat-message');
            messageDiv.classList.add(isUser ? 'user-message' : 'ai-message');
            messageDiv.textContent = text;
            chatBox.appendChild(messageDiv);
            chatBox.scrollTop = chatBox.scrollHeight;
        }

        // Clear chat function
        clearChatButton.addEventListener('click', () => {
            chatBox.innerHTML = '';
        });

        // Fetch AI response using Hugging Face API
        async function getAIResponse(message) {
            addMessage("Thinking...", false); // Temporary message
            try {
                const selectedModel = modelSelect.value;
                const response = await fetch(`https://api-inference.huggingface.co/models/${selectedModel}`, {
                    method: 'POST',
                    headers: {
                        'Authorization': 'Bearer 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',
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ inputs: message })
                });
                const data = await response.json();
                const aiMessage = data.generated_text || 'Error: No response from AI';
                // Remove "Thinking..." and show actual response
                chatBox.removeChild(chatBox.lastChild);
                addMessage(aiMessage, false);
            } catch (error) {
                chatBox.removeChild(chatBox.lastChild);
                addMessage('Error: Failed to fetch response', false);
            }
        }

        // Handle message send
        sendButton.addEventListener('click', () => {
            const userMessage = inputField.value.trim();
            if (userMessage) {
                addMessage(userMessage, true);
                inputField.value = '';
                getAIResponse(userMessage); // Fetch AI response
            }
        });

        inputField.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                sendButton.click();
            }
        });
    </script>
</body>
</html>
